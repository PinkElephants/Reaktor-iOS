import Foundation

enum HTTPMethod: String {
    case GET
    case POST
    // .. other methods
}

/// Protocol describing the interaction between the creating the requests and returning a response.
protocol API {

    /// Uses an endpoint to request a decodable resource.
    ///
    /// - Parameters:
    ///   - endpoint: The endpoint that will generate the request
    ///   - method: The HTTPMethod of the the request
    /// - Returns: A decoded response, generated by the `endpoint` parse(response) method.
    func request<T: ReqResCapsule>(_ endpoint: T, method: HTTPMethod, responseValidators: [HTTPResponseValidator]) async throws -> T.ResponseType
}

// MARK: Implementations

/// This extension allows objects using `API` to invoke the `request` function with default values
extension API {
    func request<T: ReqResCapsule>(
        _ endpoint: T,
        method: HTTPMethod = .GET,
        responseValidators: [HTTPResponseValidator] = [HTTPStatusCodeValidator(), HTTPContentTypeValidator()]) async throws -> T.ResponseType {
            try await self.request(endpoint, method: method, responseValidators: responseValidators)
        }
}

final class MoodsApi: API {
    private var session: URLSession

    init(configuration: URLSessionConfiguration = .default) {
        self.session = URLSession(configuration: configuration)
    }

    func request<T: ReqResCapsule>(
        _ endpoint: T,
        method: HTTPMethod = .GET,
        responseValidators: [HTTPResponseValidator] = [HTTPStatusCodeValidator(), HTTPContentTypeValidator()]) async throws -> T.ResponseType {
            let request = try endpoint.makeRequest()

            let (data, response) = try await session.data(for: request)

            let parsedData = try endpoint.parse(data)

            guard let response = response as? HTTPURLResponse else {
                throw URLError(.cannotParseResponse)
            }

            try responseValidators.forEach {
                try $0.validate(response)
            }

            return parsedData
        }
}

// MARK: - Deprecated APIs
extension MoodsApi {
    @available(*, deprecated, message: "Use async version")
    func getGraphs(completion: @escaping ([Graph]?, Error?) -> Void) {
        // Limits of this approach:
        // Cancellability of this task - Once created it cannot be cancelled.
        // We could add a local storage/memory with identifiers to track the task and cancel when/if necessary.
        //
        Task {
            do {
                let graphs: [Graph] = try await request(ReaktorListRequest())
                completion(graphs, nil)
            } catch {
                completion(nil, error)
            }
        }
    }
}
